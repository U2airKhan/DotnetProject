name: CI and Deploy

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: windows-2019

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
    
    - name: Restore NuGet packages
      run: nuget restore BugGuardian.MVC.sln
    
    - name: Build the Solution
      run: msbuild BugGuardian.MVC.sln /p:Configuration=Release

    - name: Publish the Application
      run: msbuild BugGuardian.MVC.sln /p:Configuration=Release /p:OutputPath=${{ runner.temp }}/publish

    - name: Copy All Files
      run: |
        $sourcePath = "${{ runner.temp }}\publish\_PublishedWebsites\BugGuardian.MVC.TestWebApp"
        $destinationPath = "${{ runner.temp }}\filtered"
        if (-not (Test-Path $destinationPath)) {
          New-Item -ItemType Directory -Path $destinationPath
        }
        Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse

    - name: Verify Filtered Directory
      run: |
        $filteredPath = "${{ runner.temp }}\filtered"
        if (Test-Path $filteredPath) {
          Get-ChildItem -Path $filteredPath -Recurse
        } else {
          Write-Output "The directory $filteredPath does not exist."
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-core-app
        path: ${{ runner.temp }}/filtered

    - name: Get Runner IP Address
      run: curl -s https://api.ipify.org

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: dotnet-core-app
        path: ${{ runner.temp }}/artifact

    - name: List Downloaded Artifact
      run: |
        echo "Listing contents of downloaded artifact directory:"
        dir ${{ runner.temp }}\artifact

    - name: Check Artifact Directory
      run: |
        if (Test-Path "${{ runner.temp }}\artifact") {
          Write-Output "Artifact directory exists."
        } else {
          Write-Output "Artifact directory does not exist."
        }

    - name: Configure WinRM
      shell: powershell
      run: |
        winrm set winrm/config/client '@{TrustedHosts="*"}'
        Start-Service WinRM
        winrm set winrm/config/service/auth '@{Basic="true"}'

    - name: Copy Deploy Script to Temp Directory
      run: |
        Copy-Item -Path .\scripts\deploy.ps1 -Destination ${{ runner.temp }}\deploy.ps1

    - name: Copy Deploy Script to Remote Server
      env:
        SERVER_USER: ${{ secrets.WINDOWS_SERVER_USER }}
        SERVER_PASSWORD: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        SERVER_HOST: ${{ secrets.WINDOWS_SERVER_HOST }}
      run: |
        $localScriptPath = "${{ runner.temp }}\deploy.ps1"
        $remoteScriptPath = "C:\scripts\deploy.ps1"
        $session = New-PSSession -ComputerName $env:SERVER_HOST -Credential (New-Object PSCredential($env:SERVER_USER, (ConvertTo-SecureString $env:SERVER_PASSWORD -AsPlainText -Force)))
        Copy-Item -Path $localScriptPath -Destination $remoteScriptPath -ToSession $session
        Remove-PSSession -Session $session

    - name: Deploy to Windows Server
      env:
        SERVER_USER: ${{ secrets.WINDOWS_SERVER_USER }}
        SERVER_PASSWORD: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        SERVER_HOST: ${{ secrets.WINDOWS_SERVER_HOST }}
      run: |
        echo "Starting deployment to Windows Server"
        $sourcePath = "${{ runner.temp }}\artifact\*"
        $destinationPath = "C:\inetpub\wwwroot\dotnetsample"
        if (-not (Test-Path $destinationPath)) { New-Item -ItemType Directory -Path $destinationPath }
        Copy-Item -Path $sourcePath -Destination $destinationPath -Recurse
        Invoke-Command -ComputerName $env:SERVER_HOST -Credential (New-Object PSCredential($env:SERVER_USER, (ConvertTo-SecureString $env:SERVER_PASSWORD -AsPlainText -Force))) -ScriptBlock { & "C:\scripts\deploy.ps1" }
